/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */






declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ParamsInput: { // input type
    limit?: number | null; // Int
    offset?: number | null; // Int
    order?: NexusGenEnums['OrderEnum'] | null; // OrderEnum
    reverse?: boolean | null; // Boolean
  }
  QueryInput: { // input type
    country?: string | null; // String
    language?: string | null; // String
    name?: string | null; // String
    state?: string | null; // String
    tag?: string | null; // String
  }
}

export interface NexusGenEnums {
  OrderEnum: "country" | "language" | "name" | "state" | "tags" | "votes"
}

export interface NexusGenRootTypes {
  Query: {};
  Station: { // root type
    country: string; // String!
    id: string; // String!
    language: string; // String!
    name: string; // String!
    state: string; // String!
    test: string; // String!
    url: string; // String!
  }
  Suggestion: { // root type
    name: string; // String!
    stations: NexusGenRootTypes['Station'][]; // [Station!]!
  }
  Suggestions: { // root type
    city: NexusGenRootTypes['Suggestion']; // Suggestion!
    country: NexusGenRootTypes['Suggestion']; // Suggestion!
    language: NexusGenRootTypes['Suggestion']; // Suggestion!
    news: NexusGenRootTypes['Suggestion']; // Suggestion!
    podcasts: NexusGenRootTypes['Suggestion']; // Suggestion!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ParamsInput: NexusGenInputs['ParamsInput'];
  QueryInput: NexusGenInputs['QueryInput'];
  OrderEnum: NexusGenEnums['OrderEnum'];
}

export interface NexusGenFieldTypes {
  Query: { // field return type
    station: NexusGenRootTypes['Station']; // Station!
    stations: NexusGenRootTypes['Station'][]; // [Station!]!
    suggestions: NexusGenRootTypes['Suggestions']; // Suggestions!
  }
  Station: { // field return type
    country: string; // String!
    id: string; // String!
    language: string; // String!
    name: string; // String!
    state: string; // String!
    tags: string[]; // [String!]!
    test: string; // String!
    url: string; // String!
    votes: number; // Int!
  }
  Suggestion: { // field return type
    name: string; // String!
    stations: NexusGenRootTypes['Station'][]; // [Station!]!
  }
  Suggestions: { // field return type
    city: NexusGenRootTypes['Suggestion']; // Suggestion!
    country: NexusGenRootTypes['Suggestion']; // Suggestion!
    language: NexusGenRootTypes['Suggestion']; // Suggestion!
    news: NexusGenRootTypes['Suggestion']; // Suggestion!
    podcasts: NexusGenRootTypes['Suggestion']; // Suggestion!
  }
}

export interface NexusGenArgTypes {
  Query: {
    station: { // args
      id: string; // ID!
    }
    stations: { // args
      params?: NexusGenInputs['ParamsInput'] | null; // ParamsInput
      query?: NexusGenInputs['QueryInput'] | null; // QueryInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Query" | "Station" | "Suggestion" | "Suggestions";

export type NexusGenInputNames = "ParamsInput" | "QueryInput";

export type NexusGenEnumNames = "OrderEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}